#!/usr/bin/perl -w


use Getopt::Long;
use DBI;
use DB_File;
use POSIX qw(strftime);
use IO::Socket;
use cyrillic qw/cset_factory/;
use locale;

# Switch Control
require '/usr/local/swctl/conf/config.pl';
require '/usr/local/swctl/conf/lib.pl';

my $ver="1.8";

# 0 - без отладочных сообщений, 1 - Включить отладку, 2 - отладка с отображением всех входных параметров
my $debug = 2;

## Определять точку доступа
my $AP_get = 1;

## Включить механизм управления точками доступа (работает только с включенной  $AP_get!) 
my $AP_check = 1;

    
my $w2k = cset_factory 1251, 20866;
my $k2w = cset_factory 20866, 1251;
##################

my %NAS_IP2 = (
        '192.168.100.25', 13,
);

my %AC = (
        '192.168.100.25', 2,
);

my %NAS_Secrets = (
        '192.168.100.25', 'dhCP2rAd',
);

my %NAS_Reply = (
        '192.168.100.25', 'Cisco-AVPair=\\"ip:dns-servers=77.239.208.17 77.239.208.17\\"\nSession-Timeout=$_[3]\nclear-password=$_[1]\nService-Type=Framed\nFramed-Protocol=PPP\nFramed-IP-Address=$_[2]\nstr=Welcome $_[0]\nint=1\n\n',
);

## Если требуется тупо обламывать авторизацию, к примеру при попытке выйти из недоверенной ТД
my %NAS_Deny_Reply = (
        '192.168.100.25', 'str=$_[0] blocked in current Access Point\nint=0\n\n',
);

#################################
# Don't change after this point #
#################################

sub expand_string {
	my $str = shift;
	eval 'return "' . $str . '"';
}

# Get options
Getopt::Long::Configure("bundling");
GetOptions("h"  => \$usage,
	   "g+" => \$AP_get,
	   "c+" => \$AP_check,
	   "d+" => \$debug);
if ($usage) { die("Usage: com_auth [-d] [-c] [-g]\n       com_auth -h\n"); }

# Check that we're running under OpenRADIUS, interface version 1
unless ($debug ||
	$ENV{'RADIUSINTERFACEVERSION'} &&
	$ENV{'RADIUSINTERFACEVERSION'} == 1) {
	die("comintel: ERROR: not running under OpenRADIUS, interface v1!\n");
}

# Set record separator to empty line and loop on input.
$/ = "\n\n";
$| = 1;			# Important - we're outputting to a pipe

my $user; my $nas; my %hdrs; my %pass = (); my $LIB_ACT ='';

### MYSQL Connect
my $dbm = DBI->connect("DBI:mysql:database=".$conf{'MYSQL_base'}.";host=".$conf{'MYSQL_host'},$conf{'MYSQL_user'},$conf{'MYSQL_pass'}) or die("connect");
#my $dbm = DBI->connect("DBI:mysql:database=".$DB_base.";host=".$DB_host,$DB_user,$DB_pass) or die("connect");
$dbm->do("SET NAMES 'koi8r'");


my %link_type = ();
my @link_types = '';
my $stm01 = $dbm->prepare("SELECT id, name FROM link_types order by id");
$stm01->execute();
while (my $ref01 = $stm01->fetchrow_hashref()) {
    $link_type{$ref01->{'name'}}=$ref01->{'id'} if defined($ref01->{'name'});
    $link_types[$ref01->{'id'}]=$ref01->{'name'} if defined($ref01->{'name'});
}
$stm01->finish();

my %headinfo = ();
my $stm = $dbm->prepare("SELECT t.term_ip, t.vlan_zone, t.term_grey_ip2, h.ip, m.lib, m.mon_login, m.mon_pass FROM heads t, hosts h, models m ".
    " WHERE h.model=m.id and t.l2sw_id=h.id and t.term_ip is not NULL and t.head_type=".$link_type{'pppoe'});
$stm->execute();
while (my $ref = $stm->fetchrow_hashref()) {
    $headinfo{'L2LIB_'.   $ref->{'term_ip'}} = $ref->{'lib'};
    $headinfo{'L2IP_'.    $ref->{'term_ip'}} = $ref->{'ip'};
    $headinfo{'MONLOGIN_'.$ref->{'term_ip'}} = $ref->{'mon_login'};
    $headinfo{'MONPASS_'. $ref->{'term_ip'}} = $ref->{'mon_pass'};
    $NAS_IP2{$ref->{'term_ip'}} = $ref->{'term_grey_ip2'};
}
$stm->finish();

while(<STDIN>) {

	# Parse pairs from server's request message
	chomp;
	$user = $nas = ""; %hdrs = ();

	# Debugging
	print STDERR "=========>> COM_AUTH[$$]:  got request: $_\n========>>\n" if $debug>1;
	s/^\s*(\S+?)\s*=\s*(.*?)\s*$/$1\n$2/gm;
	%hdrs = split /\n/;

	$user = $hdrs{str} if $hdrs{str};
	$user =~ /^\s*"?(.*?)"?\s*$/ and $user = $1;
#	$user =~ /^\s*(\S*?)\s*$/ and $user = $1;

	# Debugging
	if ($debug>1) {
		print STDERR "========>> COM_AUTH[$$]: got AVP:\n";
		while (my($key, $val) = each %hdrs) { print STDERR "\t'$key': '$val'\n"; }
		print STDERR "========>> COM_AUTH[$$]: got User: $user\n";
	}

	next;

	if ($user =~ /^\s*NAS_IP\s*=\s*(\d+\.\d+\.\d+\.\d+)\s*$/m) {
		# Accounting
		$nas = $1;
		my $secret = $NAS_Secrets{$nas};
		print STDERR "========>> COM_AUTH[$$]: NAS: $nas, Secret: $secret\n" if $debug>1;
		$secret and print "Secret=$secret\n";
		print "int=1\n\n";
		next;
	} elsif ( $user && $hdrs{'IP-Source'} ) {

	    if ($user =~ /^(\w\w)(\w\w)\.(\w\w)(\w\w)\.(\w\w)(\w\w)/) {

	    } else {

		#$user = "tux-tm" if ($user eq "comtest1");
		my $date = strftime "%Y%m%d%H%M%S", localtime($hdrs{'Timestamp'});
		my $nas_ip = $hdrs{'IP-Source'};
		my $nas_port = $hdrs{'NAS-Port'};
		my $doit = 1;

		####################### ACCESS POINT ####################
		
		my $quota=0;
		my $Query = ""; my $Query0 = ""; my $Query1 = "";

		################# ACCESS POINT END SEARCH #################

		print $Reply;
		print STDERR "===>> COM_AUTH[$$]: Reply: $Reply\n" if $debug>1;
		#print STDERR "===>> COM_AUTH[$$]: Check user '$user' successfull, set IP '$ip'\n\n";
		next;
	    }
	}
print "str=Wrong username/password.\nint=0\n\n";
}

print STDERR "===>> COM_AUTH[$$]:. Emergency shutdown!!! $DBI::errstr\n";

$dbm->disconnect;

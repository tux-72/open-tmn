КАК ВОЗНИК ПРОЕКТ

Устроившись администратором сети ISP на очередное место работы я получил в "наследство" от предыдущих администраторов сеть с очень значительной долей достаточно "пожилых" коммутаторов Nortel, 3Com и т.п. а так же свежую часть сети на D-Link DES-3026/3010.
Но ситуацию очень омрачал тот факт что имеющаяся информация мягко говоря не соответствовала реальной картине. И самое неприятное - буквально все настройки оконечных портов приходилось делать полностью вручную...
У меня был выбор - или увольняться, или придумать как облегчить свою участь. И поскольку в остальных отношениях работа устраивала на все 100% я решил автоматизировать свой труд.

На первых порах проект выполнял функцию упорядочивания информации по коммутаторам и состоянию их портов в сети ISP, сбор данных оседал в БД.

Почти сразу же стало понятно что нужно ещё собирать информацию и о том, какие абоненты когда и с каких портов и какого коммутатора подключаются в сеть. И здесь мне пришлось продумать до мелочей несколько механизмов в результате чего возникло понятие "точка доступа абонента" и механизм её точного определения в момент подключения абонента в сеть. Сам механизм был встроен внутри perl-скрипта RADIUS и это решение в дальнейшем показало свою практическую эффективность, надёжность и удобство для автоматизации управления услугами абонентов.

Далее возникла необходимость на основе собранных данных строить связи для системы мониторинга сети. Самый простой и подходящий вариант -  в автоматическом режиме, т.е. на основе информации из БД формировать конфиги для NAGIOS. Именно под это ПО наиболее просто и удобно использовать подобную схему.

Чуть позже были автоматизированы самые частые действия по настройке портов коммутаторов. И вот только после этого шага эффективность созданных механизмов резко разгрузила моё время.

В результате вложенных усилий получился замкнутый цикл автоматизированного обслуживания оборудования. Конечно алгоритмы работы не настолько интеллектуальны как человек, но их главная задача не полностью заменить специалиста, а главным образом избавить его от рутины и снабдить максимально точной и актуальной информацией по состоянию оборудования.

Гораздо позже мой коллега написал WEB-интерфейс для удобства и этот шаг гармонично объединил предыдущие усилия в достаточно понятный для обычных работников интерфейс.

Когда я решил сделать проект открытым, тут же возник вопрос о названии. В поисках названия наткнулся на описание концепции Telecommunications Management Network (TMN). Поскольку концепция практически полностью совпала с концепцией моей открытой разработки, название пришло на ум сразу же — "open-tmn". аббревиатура TMN так же является часто употребимым сокращением для имён доменов связанных с городом Тюмень (Tyumen), переезд в который и дал толчок рождению моего проекта. Так что более подходящего названия наверное и не придумать.





МНОГОУРОВНЕВОСТЬ и МОДУЛЬНОСТЬ. 

Изначально стало понятно что сделать жёсткую универсальную среду не получится даже для решения задач своей сети, да и принципы использования сети со временем менялись не единожды. Посему самым неизменным является лишь структура хранения данных, которая при необходимости дополнялась новыми полями и таблицами.

I.Уровни

1.Уровень физического интерфейса на порту, описывается полями таблицы swports — phy_id, autoneg, speed, duplex. Для настройки оборудования используются три последних,  phy_id - пока что только для техучёта.
2.Уровень физического порта, описывается  полями таблицы swports — port, portpref (символьно-цифровые приставки в некоторых коммутаторах ( CISCO, 3Com и т.п.) 
3.Уровень типов подключений абонентов на портах - описывается полями таблицы swports — ltype_id и type. Для реальных портов  type = 1, для виртуальных (уходящих несколькими vlan в транке к абоненту) > 1, инкрементно для каждого последующего виртуального порта на текущем физическом.  ltype_id — тип подключения абонента, т.е. тип получаемой им услуги.
4.Уровень точки доступа абонента, по сути каждая запись таблицы  swports есть потенциальная точка доступа, исключение - транковые порты (downlink, uplink) не могут быть таковыми.
5.Уровень терминации услуг абонентов. Описывается таблицей head_link, каждая запись — проброшенный от оконечного порта до головного терминирующего устройства Vlan-линк.  

II Связи между уровнями, начальная настройка

В данный момент предполагается лишь древовидный тип построения сети, так же собственно как и в Nagios.

До начала использования необходимо заполнить несколько базовых таблиц с данными
models - модели коммутаторов, в ней размещены базовые общие для указанной модели оборудования настройки. 
hosts - хосты (по сути коммутаторы) сети
vlan_list - список задействованных vlan в сети
heads - головное терминирующее оборудование
phy_types  - типы «физики» на портах, использовать необязательно, но очень удобно для учёта портов сети.
link_types  - типы использования портов, другими словами типы предоставления услуг на порту а так же часть служебных типов линков на порту. Очень важная часть, одна из ключевых в концепции. От типа линка на порту зависят способы управления портом и другими коммутаторами в цепочке.

При использовании DHCP следует заполнить/исправить ещё несколько таблиц
pool_types — типы пцулов адресов
dhcp_pools — собственно используемые пулы
dhcp_addr — список адресов пулов, выдаваемых абонентам, данные по аренде адресов, эту таблицу изначально проще всего заполнить с помощью имеющегося скрипта (tools/dhcp/gen_dhcp_pool.pl), который сам cгенерит нужные записи.

В дальнейшем я выложу sql файлы с примерами заполнения вышеописанных таблиц.

III. Модули

Данные по оборудованию должны попадать в БД в основном при установке новых устройств в сеть и в момент авторизации абонентов, а так же в результате предоставления абонентам иных не требующих авторизации сервисов — например предоставление коммутируемого доступа между территориально распределёнными точками абонента.

Для сбора данных можно использовать любой удобный в каждом конкретном случае способ и соответственно написать под это отдельный модуль. 

1.В основном данные поступают в процессе авторизации PPPoE абонентов в этом же процессе работает и механизм определения точек доступа. Это базовая часть получения параметров услуги абонента и связывания их с точкой доступа Здесь же при необходимости формируются и задания по перенастройке оборудования — например изменить скорость на порту.
2.Второй обязательный шаг — периодическая синхронизация данных из билинговой системы в систему TMN, по сути - синхронизация между двумя БД. Второй шаг нужен для того, чтобы удалить/заблокировать запись о терминации абонента, если например он расторг договор или например ему приостановлена услуга не требующая авторизации.  Или же у подобного абонента изменились параметры доступа — например скорость на порту.
3.Синхронизация параметров услуги абонента с внешними устройствами. Типичный пример — синхронизация скоростей выхода в Интернет с внешним сервером-шейпером на FreeBSD.
4.Выполнение заданий по перенастройке оборудования. Самые простые задания например по изменению параметров порта выполняются автоматически с проверкой в цикле, более сложные (автоматический проброс VLAN от порта абонента через цепочку транков/аплинков до головного терминатора ) — под контролем оператора. 
5.Действия через WEB-интерфейс, различные правки, изменения, добавления и т.п. 

